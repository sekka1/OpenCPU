file.show('~/.algoio/dataset')
putFile('~/.algoio/dataset', 'f8d9935b52e09e1b691be0900c705c99', 'https://pod3.staging.v1.api.algorithms.io')
source('~/git/opencpu/algoio/R/do.R')
putFile
executeAPICall
putFile
authToken <- 'f8d9935b52e09e1b691be0900c705c99'
algoServer <- 'http://pod3.staging.v1.api.algorithms.io/'
executeAPICall(authToken, algoServer, 'dataset', action=postForm)
putFile
fileUpload
help(fileUpload)
executeAPICall(authToken, algoServer, 'dataset', action=postForm, theFile=fileUpload('~/.algoio/dataset'))
content <- executeAPICall(authToken, algoServer, 'dataset', action=postForm, theFile=fileUpload('~/.algoio/dataset'))
content
content[[1]]
require('RJSONIO')
fromJSON(content[[1]])
fromJSON(content[[1]])$data
fromJSON(content)
fromJSON(content)[[1]]
fromJSON(content)[[1]]$data
help(emptyenv)
help(new.env)
baseenv()
baseenv()
help(new.env)
map <- new.env(hash=TRUE, parent=emptyenv())
digest(x)
require('digest')
digest(x)
x
x[1,X1]
x[1, 'X1']
x[1, 'X1'] < 2
x[1, 'X1'] <- 2
digest(x)
name(x)
names(x)
source('~/git/opencpu/algoio/R/do.R')
algoio.upload.dataframe(x, authToken)
dsmap <- new.env(hash=TRUE, parent=emptyenv())
load("~/.algoio/DataSets.RData", env=dsmap)
ls(dsmap)
dsmap[[x]]
source('~/git/opencpu/algoio/R/do.R')
algoio.delete.dataset(3943)
source('~/git/opencpu/algoio/R/do.R')
algoio.delete.dataset(3943)
algoio.delete.dataset(3943)
executeAPICall(authToken, algoServer, "/dataset")
fromJSON(executeAPICall(authToken, algoServer, "/dataset"))
content = executeAPICall(authToken, algoServer, "/dataset")
fromJSON(content)
content = executeAPICall(authToken, algoServer, "/dataset")
content
fromJSON(content)
fromJSON(content=content)
fromJSON()
content = executeAPICall(authToken, algoServer, "/dataset")
fix(content)
content
save(content,file='~/.algoio/content.RData')
file.show('~/.algoio/content.RData')
fromJSON(content)
require('stringr')
str_extract(content, "{.*}")
str_extract(content, "\{.*\}")
str_extract(content, "\\{.*\\}")
fromJSON(str_extract(content, "\\{.*\\}"))
dataset <- fromJSON(str_extract(content, "\\{.*\\}"))
dataset$data[[30]]
dataset <- fromJSON(str_extract(content, "\\{.*\\}"))$data
dataset
dataset[[1]]
class(dataset)
class(dataset)
lapply(dataset,'[[')
lapply(dataset,'[[',id)
lapply(dataset,'[[','id')
sapply(dataset,'[[','id')
exists(sapply(dataset,'[[','id'), '3502')
'3502' %in% sapply(dataset,'[[','id')
'hello' %in% sapply(dataset,'[[','id')
help(postForm)
executeAPICall(authToken, algoServer, paste('dataset/','3943'), action=httpDELETE)
content = executeAPICall(authToken, algoServer, "/dataset")
dataset <- fromJSON(str_extract(content, "\\{.*\\}"))$data
dataset
executeAPICall(authToken, algoServer, 'dataset/3943', action=httpDELETE)
content <- executeAPICall(authToken, algoServer, "/dataset");
dataset <- fromJSON(str_extract(content, "\\{.*\\}"))$data
dataset
source('~/git/opencpu/algoio/R/do.R')
algoio.delete.dataset('3942')
content <- executeAPICall(authToken, algoServer, "/dataset");
dataset <- fromJSON(str_extract(content, "\\{.*\\}"))$data
length(dataset)
content <- executeAPICall(authToken, algoServer, "/dataset");
dataset <- fromJSON(str_extract(content, "\\{.*\\}"))$data
dataset
executeAPICall(authToken, algoServer, 'dataset/3942', action=httpDELETE)
content <- executeAPICall(authToken, algoServer, "/dataset");
dataset <- fromJSON(str_extract(content, "\\{.*\\}"))$data
dataset
algoio.delete.dataset('3941')
executeAPICall(authToken, algoServer, 'dataset/3941', action=httpDELETE)
source('~/git/opencpu/algoio/R/do.R')
executeAPICall(authToken, algoServer, 'dataset', action=postForm, theFile=fileUpload('~/.algoio/dataset'))
executeAPICall(authToken, algoServer, 'dataset/3944', action=httpDELETE)
executeAPICall(authToken, algoServer, 'dataset', action=postForm, theFile=fileUpload('~/.algoio/dataset'))
algoio.delete.dataset('3945')
content <- executeAPICall(authToken, algoServer, "/dataset");
dataset <- fromJSON(str_extract(content, "\\{.*\\}"))$data
dataset
is.null(token)
is.null(ffdkjfjdk)
exists(token)
exists("token")
exists("x")
exists("authToken")
remove(authToken)
exists("authToken")
if (is.null(authToken))
authToken <- getinput('Your authentication token')
if (!exists(authToken))
authToken <- getinput('Your authentication token')
if (!exists(authToken))
kfjkdjfd
if (!exists('authToken')) authToken <- getinput('Your authentication token')
exists("authToken")
authToken
source('~/git/opencpu/algoio/R/do.R')
source('~/git/opencpu/algoio/R/do.R')
remove(authToken)
algoServer
remove(algoServer)
exists("algoServer")
executeAPICall(authToken, algoServer, 'dataset', action=postForm, theFile=fileUpload('~/.algoio/dataset'))
algoServer <- 'http://pod3.staging.v1.api.algorithms.io/'
executeAPICall(authToken, algoServer, 'dataset', action=postForm, theFile=fileUpload('~/.algoio/dataset'))
authToken <- 'f8d9935b52e09e1b691be0900c705c99'
executeAPICall(authToken, algoServer, 'dataset', action=postForm, theFile=fileUpload('~/.algoio/dataset'))
algoio.delete.dataset('3946')
source('~/git/opencpu/algoio/R/do.R')
authToken <- 'f8d9935b52e09e1b691be0900c705c99'
algoServer <- 'http://pod3.staging.v1.api.algorithms.io/'
algoio.delete.dataset('3946')
source('~/git/opencpu/algoio/R/do.R')
content <- executeAPICall(authToken, algoServer, "/dataset");
content <- executeAPICall(authToken, algoServer, 'dataset', action=postForm, theFile=fileUpload('~/.algoio/dataset'))
content
class(content)
content[1]
content[2]
content[3]
content[1]
str(content)
names(content)
content
fromJSON(content)
fromJSON(content)[[1]]$data
fromJSON(content)[[1]]$api
class(fromJSON(content)[[1]]$api)
length(fromJSON(content)[[1]]$api)
str_extract(fromJSON(content)[[1]]$api, 'Success')
str_extract(fromJSON(content)[[1]]$api, 'hello')
names(fromJSON(content)[[1]]$api)
content
content[[1]]
json <- fromJSON(content)[[1]]
json[['Authentication']]
json
json$api$Authentication
json$api[['Authentication']]
json$api[['Authentication']] == 'Sucess'
json$api[['Authentication']]
json$api[['Authentication']]=='Success'
source('~/git/opencpu/algoio/R/do.R')
x
algoio.upload.dataframe(x)
authToken
algoServer
algoio.upload.dataframe(x)
executeAPICall(authToken, algoServer, 'dataset', action=postForm, theFile=fileUpload('~/.algoio/dataset'))
source('~/git/opencpu/algoio/R/do.R')
algoio.upload.dataframe(x)
algoio.delete.dataset('3949')
algoio.delete.dataset('3948')
source('~/git/opencpu/algoio/R/do.R')
install.packages("devtools")
install_github("Algoio","algorithms-io")
library(devtools)
install_github("Algoio","algorithms-io")
ls
ls()
algoio.upload.dataframe
authToken <- "b6886aca941c817730544b346c0bdd2f"
algoServer <- "http://pod3.staging.v1.api.algorithms.io"
age <- rnorm(100, mean=30, sd=14)
height <- rnorm(10, mean=68, sd=20)
village <- data.frame(age=age,height=height)
algoio.upload.dataframe(village)
algoServer <- "http://pod3.staging.v1.api.algorithms.io/"
algoio.upload.dataframe(village)
algoServer <- "http://v1.api.algorithms.io/"
algoio.upload.dataframe(village)
algoio.upload.dataframe(village)
exit
quit()
postForm("http://166.78.24.138:7474/db/data/cypher")
library(RCurl)
postForm("http://166.78.24.138:7474/db/data/cypher")
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10)
;
)
D]
;
))))
)
)
exit
''
')
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10')
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=c('ContentType'='application/json'))
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=c('ContentType'='application/json'))
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=c('Content-Type'='application/json'))
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=list('Content-Type'='application/json'))
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=list(httpheader=list('Content-Type'='application/json')))
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=list(httpheader=list('Accept'='application/json')))
debug(portForm)
debug(postForm)
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=list(httpheader=list('Accept'='application/json')))
http.header
undebug(postForm)
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=list(httpheader=list('Accept'='application/json')))
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=list(httpheader=list('Accept'='application/json','Content-Type'="application/json")))
debug(postForm)
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=list(httpheader=list('Accept'='application/json','Content-Type'="application/json")))
http.header
exit
quit
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=list(httpheader=list(Content-Type'="application/json")))
''
undebug(postForm)
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10', .opts=list(httpheader=list('Content-Type'="application/json")))
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10'
)
toJSON(postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10'))
library(RJSONIO)
toJSON(postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10'))
fromJSON(postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10'))
fromJSON(postForm("http://166.78.24.138:7474/db/data/cypher", postfields = toJSON(list(query="match e:Engineer return e limit 10"))))
postForm("http://166.78.24.138:7474/db/data/cypher", postfields = toJSON(list(query="match e:Engineer return e limit 10")))
postForm("http://166.78.24.138:7474/db/data/cypher", query='match e:Engineer return e limit 10')
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(httpheader="abcd"), query='match e:Engineer return e limit 10')
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(httpheader=c('Content-Type'='application/json',Accept='application/json')), query='match e:Engineer return e limit 10')
debug(postForm)
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(httpheader=c('Content-Type'='application/json',Accept='application/json')), query='match e:Engineer return e limit 10')
http.header
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',Accept='application/json')), query='match e:Engineer return e limit 10')
getURL("http://api.crunchbase.com/v/1/company/snapchat.js")
getURL("http://api.crunchbase.com/v/1/company/snapchat.js", api_key='2ae7pfjqp2e72jx5t3kpjv4j')
getURL("http://api.crunchbase.com/v/1/company/snapchat.js", .params=list(api_key='2ae7pfjqp2e72jx5t3kpjv4j'))
getURL("http://api.crunchbase.com/v/1/company/snapchat.js?api_key='2ae7pfjqp2e72jx5t3kpjv4j')
)
''
""
;
""
"
""
"
getURL("http://api.crunchbase.com/v/1/company/snapchat.js?api_key=2ae7pfjqp2e72jx5t3kpjv4j")
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',Accept='application/json')), query='match e:Engineer return e limit 10')
quit
exit
quit()
exit()
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',Accept='applicat
;
)
))
''
'
undebug(postForm)
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',Accept='application/json')), query='match e:Engineer return e limit 10')
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',Accept='application/json')), query='match e:Engineer return e limit 10', style="post")
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',Accept='application/json')), query='match e:Engineer return e limit 10', style="POST")
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/x-www-form-urlencoded',Accept='application/json')), query='match e:Engineer return e limit 10', style="POST")
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/x-www-form-urlencoded',Accept='application/x-www-form-urlencoded')), query='match e:Engineer return e limit 10', style="POST")
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/x-www-form-urlencoded'), query='match e:Engineer return e limit 10', style="POST")
;
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/x-www-form-urlencoded'), query='match e:Engineer return e limit 10', style="POST");
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/x-www-form-urlencoded')), query='match e:Engineer return e limit 10', style="POST");
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/x-www-form-urlencoded')), query='match e:Engineer return e limit 10');
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='multipart/form-data')), query='match e:Engineer return e limit 10', style="POST");
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json')), query='match e:Engineer return e limit 10', style="POST");
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json')), toJSON(list(query='match e:Engineer return e limit 10')), style="POST");
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json')), postfields=toJSON(list(query='match e:Engineer return e limit 10')), style="POST");
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json')), postfields=toJSON(list(query="match e:Engineer return e limit 10")));
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json')), postfields=toJSON(list("query"='match e:Engineer return e limit 10')), style="POST");
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10'))), style="POST");
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10'))));
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10'))));
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/x-www-form-urlencoded',"Accept"='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10'))));
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10'))));
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json')))
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json')), query='query=match e:Engineer return e limit 10')
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json')), toJSON(list(query='query=match e:Engineer return e limit 10')
)
)
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json')), toJSON(list(query='query=match e:Engineer return e limit 10')))
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json')), .params=toJSON(list(query='query=match e:Engineer return e limit 10')))
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json')), .params=list(query='query=match e:Engineer return e limit 10'))
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/x-www-form-urlencoded',"Accept"='application/json')), .params=list(query='query=match e:Engineer return e limit 10'))
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json')), toJSON(list(query='query=match e:Engineer return e limit 10')))
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10'))));
fromJSON(postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10')))));
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10'))))
write(postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10')))))
help(write)
dir()
output = postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10'))))
output
class(output)
class(output)
head(output)
output
rawToChar(output)
fromJSON(rawToChar(output))
queryCypher <- function(querystring) {
h = basicTextGatherer()
curlPerform(url="http://localhost:7474/db/data/ext/CypherPlugin/graphdb/execute_query",
postfields=paste('query',curlEscape(querystring), sep='='),
writefunction = h$update,
verbose = FALSE
)
result <- fromJSON(h$value())
data <- data.frame(t(sapply(result$data, unlist)))
#names(data) <- result.json$columns
junk <- c("outgoing_relationships","traverse", "all_typed_relationships","property","self","properties","outgoing_typed_relationships","incoming_relationships","create_relationship","paged_traverse","all_relationships","incoming_typed_relationships")
data <- data[,!(names(data) %in% junk)]
data
}
queryCypher
h = basicTextGatherer();
curlPerform("http://166.78.24.138:7474/db/data/cypher")
querystring = "query=match e:Engineer return e limit 10"
output
fromJSON(rawToChar(output))
result <- fromJSON(rawToChar(output))
data <- data.frame(t(sapply(result$data, unlist)))
data
junk <- c("outgoing_relationships","traverse", "all_typed_relationships","property","self","properties","outgoing_typed_relationships","incoming_relationships","create_relationship","paged_traverse","all_relationships","incoming_typed_relationships")
data <- data[,!(names(data) %in% junk)]
data
size(data)
data
result
postForm("http://166.78.24.138:7474/db/data/cypher", .opts=list(verbose=TRUE, httpheader=c('Content-Type'='application/json',"Accept"='application/json'), postfields=toJSON(list("query"='match e:Engineer return e limit 10'))))
fromJSON(rawToChar(output))
data
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
source('~/git/opencpu/neo4j-r/R/do.R')
queryCypher2("match (p)-[:HAS_EDUCATION]->(e)-[:AWARDED]->(d) return p.source_uid, e.graducated_year, d.value limit 10;")
queryCypher2(querystring="match (p)-[:HAS_EDUCATION]->(e)-[:AWARDED]->(d) return p.source_uid, e.graducated_year, d.value limit 10;")
queryCypher2(querystring="match (p)-[:HAS_EDUCATION]->(e)-[:AWARDED]->(d) return p.source_uid, e.graducated_year, d.value limit 10;")
queryCypher2(querystring="match (p)-[:HAS_EDUCATION]->(e) return p.source_uid, e.graducated_year limit 10;")
queryCypher2(querystring="match (p)-[:HAS_EDUCATION]->(e) return p.source_uid, e limit 10;")
queryCypher2(querystring="match (p)-[:HAS_EDUCATION]->(e) return p.source_uid, e.graduated_year limit 10;")
queryCypher2(querystring="match (p)-[:HAS_EDUCATION]->(e)-[:AWARDED]->(d) return p.source_uid, e.graduated_year, d.value limit 10;")
write.csv(queryCypher2(querystring="match (p)-[:HAS_EDUCATION]->(e)-[:AWARDED]->(d) return p.source_uid, e.graduated_year, d.value limit 10;"))
help(write.csv)
write.csv(queryCypher2(querystring="match (p)-[:HAS_EDUCATION]->(e)-[:AWARDED]->(d) return p.source_uid, e.graduated_year, d.value order by p.source_uid"), file="~/git/opencpu/neo4j-r//data/education.csv")
queryCypher2(querystring="match (p)-[:HAS_EDUCATION?]->(e)-[:AWARDED?]->(d) where HAS(p.source_uid) return p.source_uid, e.graduated_year, d.value limit 10;")
queryCypher2(querystring="match (p)-[r?:HAS_EDUCATION]->(e) where HAS(p.source_uid) and r is NULL return p.source_uid limit 10;")
queryCypher2(querystring="match (p)-[r?:HAS_EDUCATION]->(e) where HAS(p.source_uid) and r is NULL return p limit 10;")
queryCypher2(querystring="match (p)-[r?:HAS_EDUCATION]->(e) where r is NULL return p limit 10;")
queryCypher2(querystring="match (p:Person)-[r?:HAS_EDUCATION]->(e) where r is NULL return p limit 10;")
queryCypher2(querystring="match (p:Person)-[r?:HAS_EDUCATION]->(e) where r is null return p limit 10;")
queryCypher2(querystring="start p=node(*) match (p)-[r?:HAS_EDUCATION]->(e) where r is null return p limit 10;")
queryCypher2(querystring="start p=node(*) match (p)-[r?:HAS_EDUCATION]->(e) where r is null return p.source_uid limit 10;")
queryCypher2(querystring="start p=node(*) match (p)-[r?:HAS_EDUCATION]->(e) where r is null return p limit 10;")
queryCypher2(querystring="start p=node(*) match (p)-[r?:HAS_EDUCATION]->(e) where HAS(p.source_uid) and r is null return p limit 10;")
queryCypher2(querystring="start p=node(*) match (p)-[r?:HAS_EDUCATION]->(e) where HAS(p.source_uid) and r is null return count(p)")
queryCypher2(querystring="start p=node(*) match (p)-[r?:HAS_EDUCATION]->(e) where HAS(p.source_uid) and r is null return p.source_uid limit 1000")
queryCypher2(querystring="start p=node(*) match (p)-[r?:HAS_EDUCATION]->(e) where HAS(p.source_uid) and r is null return p.source_uid limit 20")
queryCypher2(querystring="start p=node(*) match (p)-[r?:HAS_EDUCATION]->(e) where HAS(p.source_uid) and r is null return p.source_uid, p.created limit 20")
write.csv(queryCypher2(querystring="start p=node(*) match (p)-[r?:HAS_EDUCATION]->(e) where HAS(p.source_uid) and r is null return p.source_uid, p.created, p.datasource_name"), file="~/git/opencpu//neo4j-r/data/persons_no_education.csv")
source('~/git/opencpu/neo4j-r/R/do.R')
V(g)[grepl("ben", V(g)$name),]
install.packages("igraph")
library(igraph)
g <- createGraph()
V(g)[grepl("ben", V(g)$name),]
V(g)[grepl("ben", V(g)$name)]
source('~/git/opencpu/neo4j-r/R/do.R')
persons <- scoreAllPersons()
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
rm(persons)
runPageRank
runPageRank()
source('~/git/opencpu/neo4j-r/R/do.R')
queryCypher2("match (p:PersonGUID) return count(p);")
queryCypher2(querystring="match (p:PersonGUID) return count(p);")
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
queryCypher2("match (p:PersonGUID) return count(p);")
queryCypher2("match (p:PersonGUID) return count(p);")
stats <- c("a":1)
stats <- c("a"<-1)
status
stats
c$a
c["a"]
c
stats["a"]
stats[a]
source('~/git/opencpu/neo4j-r/R/do.R')
crunchBaseBasicStats()
stats <- c("a"<-1, "b"<-2)
stats
stats
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
crunchBaseBasicStats()
queryCypher2("m:PersonGUID)-[:HAS_EDUCATION]->(d) where  HAS(d.institution) AND HAS(d.graduated_year) return count(p)")
queryCypher2("match (m:PersonGUID)-[:HAS_EDUCATION]->(d) where  HAS(d.institution) AND HAS(d.graduated_year) return count(p)")
queryCypher2("match (p:PersonGUID)-[:HAS_EDUCATION]->(d) where HAS(d.institution) AND HAS(d.graduated_year) return count(p) ;")
source('~/git/opencpu/neo4j-r/R/do.R')
queryCypher2("match (p:PersonGUID)-[:HAS_EDUCATION]->(d) where HAS(d.institution) AND HAS(d.graduated_year) AND HAS(d.type) return count(p);")
queryCypher2("match (d:Degree) return count(d)")
queryCypher2("match (p:PersonGUID)-[e:HAS_EDUCATION]->something return p.source_uid, count(e)")
queryCypher2("match (p:PersonGUID)-[e:HAS_EDUCATION]->something where count(e) > 1 return p.source_uid, count(e) limit 10")
queryCypher2("match (p:PersonGUID)-[e:HAS_EDUCATION]->something with count(e) > 1 return p.source_uid, count(e) limit 10")
queryCypher2("match (d:Degree) return d limit 200")
queryCypher2("match (d:Degree) return d.value limit 200")
queryCypher2("match (d:Degree) return id(d), d.value limit 200")
certs <- queryCypher2("match (d:Degree) return id(d), d.value limit 200")
certs
class(certs)
head(certs)
grepl("deg",certs$X2)
grepl("doct",certs$X2)
certs[grepl("doct",certs$X2),]
certs[grepl("master",certs$X2),]
certs[grepl("science",certs$X2),]
certs[grepl("mba",certs$X2),]
source('~/git/opencpu/neo4j-r/R/do.R')
runPageRank()
persons <- scoreCrunchBase()
source('~/git/opencpu/neo4j-r/R/do.R')
persons <- scoreCrunchBase()
runPageRank()
source('~/git/opencpu/neo4j-r/R/do.R')
runPageRank()
source('~/git/opencpu/neo4j-r/R/do.R')
nrow(output)
output <- runRegression(10000)
install.packages("igraph")
output <- runRegression(10000)
library(igraph)
output <- runRegression(10000)
source('~/git/opencpu/neo4j-r/R/do.R')
output <- runRegression(10000)
setwd("~/git/opencpu/neo4j-r")
output <- runRegression(10000)
install.packges("devtools")
install.packages("devtools")
install_github("sekka", "opencpu")
library(devtools)
install_github("sekka", "opencpu")
install_github("sekka", "opencpu/classification")
install_github("sekka", "opencpu.classification")
source('~/git/opencpu/classification/R/do.R')
output <- runRegression(10000)
nrow(output)
nrow(filterInvestor(output))
nrow(filterLawyer(filterInvestor(output)))
source('~/git/opencpu/neo4j-r/R/do.R')
nrow(filterLawyer(filterInvestor(output)))
source('~/git/opencpu/neo4j-r/R/do.R')
output <- runRegression(10000)
source('~/git/opencpu/classification/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
output <- runRegression(10000)
nrow(output)
source('~/git/opencpu/neo4j-r/R/do.R')
queryCyper2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return p limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return p limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return id(p), limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return id(p), plimit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return id(p), p limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return id(p), p.source_uid limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return id(p), p.source_uid, p.born_year limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return id(p), p.source_uid, p.born_year? limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return id(p), p.source_uid, p.born_year?, p.twitter_username limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return id(p), p.source_uid, p.born_year?, p.twitter_username? limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q,p-[:HAS_EMPLOYMENT]->(j) WHERE r is null return id(p), p.source_uid, p.born_year?, p.twitter_username?, collect(j.title?) limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q,p-[:HAS_EMPLOYMENT]->(j) WHERE r is null return id(p), p.source_uid, p.born_year?, p.twitter_username?, collect(firm_name?) limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q,p-[:HAS_EMPLOYMENT]->(j) WHERE r is null return id(p), p.source_uid, p.born_year?, p.twitter_username?, collect(j.firm_name?) limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q,p-[:HAS_EMPLOYMENT]->(j) WHERE r is null return id(p), p.source_uid, p.born_year?, p.twitter_username?, collect(j.firm_name?) limit 10")
source('~/git/opencpu/neo4j-r/R/do.R')
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q,p-[:HAS_EMPLOYMENT]->(j) WHERE r is null return id(p), p.source_uid, p.born_year?, p.twitter_username?, collect(j.firm_name?) limit 10")
queryCypher2("start p=node(*) match (p:PersonGUID)-[r?:HAS_EDUCATION]->q WHERE r is null return id(p), p.source_uid, p.born_year?, p.twitter_username? limit 10")
