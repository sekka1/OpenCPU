head(pr[order(pr$pagerank, decreasing=T),], n=10)
head(pr[order(pr$pagerank, decreasing=T),], n=10)
head(vc)
vc[,c("person", "firm")]
duplicated(vc[,c("person", "firm")])
vc[!duplicated(vc[,c("person", "firm")]),]
head(vc[!duplicated(vc[,c("person", "firm")]),])
merge(head(pr[order(pr$pagerank, decreasing=T),],10), vc[!duplicated(vc[,c("person", "firm")]),], by="person")
head(merge(head(pr[order(pr$pagerank, decreasing=T),],10), vc[!duplicated(vc[,c("person", "firm")]),], by="person"))
head(pr[order(pr$pagerank, decreasing=T),], n=10)
head(merge(head(pr[order(pr$pagerank, decreasing=T),],10), vc[!duplicated(vc[,c("person", "firm")]),], by="person", all.x=T))
head(merge(head(pr[order(pr$pagerank, decreasing=T),],10), vc[!duplicated(vc[,c("person", "firm")]),], by="person", all.y=F))
head(merge(head(pr[order(pr$pagerank, decreasing=T),],10), vc[!duplicated(vc[,c("person", "firm")]),], by="person", all=F))
merge(head(pr[order(pr$pagerank, decreasing=T),],10), vc[!duplicated(vc[,c("person", "firm")]),], by="person", all=F)
merge(head(pr[order(pr$pagerank, decreasing=T),],10), vc[!duplicated(vc[,c("person", "firm")]),c(""person", "firm")], by="person", all=F)
merge(head(pr[order(pr$pagerank, decreasing=T),],10), vc[!duplicated(vc[,c("person", "firm")]),c("person", "firm")], by="person", all=F)
top10 <- merge(head(pr[order(pr$pagerank, decreasing=T),],10), vc[!duplicated(vc[,c("person", "firm")]),c("person", "firm")], by="person", all=F)
aggregate(top10,by="person")
aggregate(top10,by="person",FUN=c)
aggregate(top10,by=top10$person,FUN=c)
aggregate(top10,by=list(top10$person),FUN=c)
top10
head(pr[order(pr$pagerank, decreasing=T),], n=10)
top10 <- head(pr[order(pr$pagerank, decreasing=T),], n=10)
top10[,-c("person")]
top10[,c("pagerank")]
top10
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
names(pr) <- c("person", "pagerank")
top10 <- head(pr[order(pr$pagerank, decreasing=T),], n=10)
top10
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
top10 <- head(pr[order(pr$pagerank, decreasing=T),], n=10)
names(pr) <- c("person", "pagerank")
top10 <- head(pr[order(pr$pagerank, decreasing=T),], n=10)
top10
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
pr
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
pr
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
pr
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
pr
pr <- topConnectedVCs()
pr
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
pr
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
head(pr)
head(pr[order(pr$pr, decreasing=T),], n=10)
names(pr)
head(pr[order(pr$pagerank, decreasing=T),], n=10)
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
head(pr[order(pr$pagerank, decreasing=T),], n=10)
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
pr
sort(pr)
head(sort(pr))
head(sort(pr, decreasing=T))
as.data.frame(pr)
as.data.frame(sort(pr, decreasing=T)
)
names(as.data.frame(sort(pr, decreasing=T)))
head(as.data.frame(sort(pr, decreasing=T)),10)
source('~/git/opencpu/neo4j-r/R/do.R')
pr <- topConnectedVCs()
head(as.data.frame(sort(pr, decreasing=T)),10)
top10 <- head(as.data.frame(sort(pr, decreasing=T)),10)
top10
sapply(top10, FUN=row.names)
sapply(top10, FUN=name)
sapply(top10, FUN=print)
top10
class(top10)
head(vc)
head(fat)
head(vcs)
merge(top10, fat)
length(pr)
top10 <- head(as.data.frame(sort(pr, decreasing=T)),10)
top10
top10 <- data.frame(head(as.data.frame(sort(pr, decreasing=T)),10))
top10
top10 <- head(as.data.frame(sort(pr, decreasing=T)),10)
source('~/git/opencpu/neo4j-r/R/do.R')
top10 <- head(as.data.frame(sort(pr, decreasing=T)),10)
pr <- topConnectedVCs()
pr
head(pr)
class(pr)
df <- data.frame(pr)
df
head(df)
5 % 2
5 // 2
install.packages("shiny")
library(shiny)
runExample("01_hello")
source("http://bioconductor.org/biocLite.R")
biocLite()
bioLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
library(EBImage)
install.packages("EBImage")
install.packages("ebimage")
bioLite("EBImage")
biocLite("EBImage")
library("EBImage")
?system.file
door = readImage("~/Downloads/doors//images.jpeg")
door
display(door)
display(door + 10)
display(door+1)
display(2*door)
display(t(door))
door2 = t(door)
display(rotate(door,45))
computeFeatures.shape(door)
la = matrix(1, nc=3, nr=3)
la[2,2] = -8
y = filter2(x, la)
display(filter2(door,la))
computeFeatures.shape(filter2(door,la))
computeFeatures(filter2(door,la))
runExample
runApp
topSchoolsByVcs()
source('~/git/opencpu/neo4j-r/R/do.R')
source('~/git/opencpu/neo4j-r/R/do.R')
topSchoolsByFounders()
students <- topSchoolsByVcs
students <- topSchoolsByVcs()
students <- topSchoolsByFounders()
students
head(students)
source('~/git/opencpu/neo4j-r/R/do.R')
topSchoolsByFounders()
source('~/git/opencpu/neo4j-r/R/do.R')
topSchoolsByFounders()
source('~/git/opencpu/neo4j-r/R/do.R')
topSchoolsByFounders()
source('~/git/opencpu/neo4j-r/R/do.R')
ls()
sapply(ls(), object.size)
sort(sapply(ls(), object.size))
sort(sapply(ls(), object.size), decreasing=T)
debug(queryCypher2)
source('~/git/opencpu/neo4jr/R/do.R')
queryCypher2("match s:Skill return s.name!, s.display_name! limit 10")
source('~/git/opencpu/neo4jr/R/do.R')
queryCypher2("match s:Skill return s.name!, s.display_name! limit 10")
debug(queryCypher2)
queryCypher2("match s:Skill return s.name!, s.display_name! limit 10")
d
class(d)
t(d)
data
data.frame(t(d))
is.list(d)
class(d)
is.matrix(d)
Q
queryCypher2("match s:Skill return s.name! limit 10")
d
class(d)
is.matrix(d)
source('~/git/opencpu/neo4jr/R/do.R')
Q
source('~/git/opencpu/neo4jr/R/do.R')
queryCypher2("match s:Skill return s.name! limit 10")
queryCypher2("match s:Skill return s.name!, s.display_name! limit 10")
source('~/git/opencpu/neo4jr/R/do.R')
queryCypher2("match s:Skill return s.display_name! limit 10")
queryCypher2("match s:Skill return collect(s.display_name!)")
?Corpus
install.packages("tm")
library("tm")
Corpus("hello world")
?Corpus
?DirSource
skills
queryCypher2("match s:Skill return s.display_name!")
queryCypher2("match s:Skill return s.name!")
queryCypher2("match s:Skill return s.display_name! limit 10")
queryCypher2("match s:Skill return s.display_name!")
skills <- queryCypher2("match s:Skill return s.display_name!")
head(skills)
DataframeSource(skills)
corpus <- Corpus(x=DataframeSource(skills))
tdm <- TermDocumentMatrix(corpus)
as.matrix(tdm)
head(as.matrix(tdm))
as.matrix(tdm)[1,1]
as.matrix(tdm)[1,2]
names(as.matrix(tdm))
library(wordcloud)
m <- as.matrix(tdm)
sort(rowSums(m), decreasing=TRUE)
head(sort(rowSums(m), decreasing=TRUE))
head(sort(rowSums(m), decreasing=TRUE),40)
?TermDocumentMatric
?TermDocumentMatrix
dtm <- DocumentTermMatrix(corpus,
control = list(weighting =
function(x)
weightTfIdf(x, normalize =
FALSE),
stopwords = TRUE))
m <- as.matrix(tdm)
head(sort(rowSums(m), decreasing=TRUE),40)
?stopwords("english")
stopwords("english")
?tm_map
?removeWords
corpus <- tm_map(x=corpus, FUN=removeWords, stopwords("english"))
m <- as.matrix(tdm)
head(sort(rowSums(m), decreasing=TRUE),40)
grepl("and", stopwords("english"))
corpus <- tm_map(x=corpus, FUN=removeWords, stopwords("english"))
tdm <- TermDocumentMatrix(corpus)
m <- as.matrix(tdm)
head(sort(rowSums(m), decreasing=TRUE),20)
wordFreq <- sort(rowSums(m), decreasing=TRUE)
set.seed(375)
grayLevels <- gray( (wordFreq+10) / (max(wordFreq)+10) )
wordcloud(words=names(wordFreq), freq=wordFreq, min.freq=3, random.order=F, colors=grayLevels)
library("RWeka")
install.packages("RWeka")
library(RWeka)
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
tdm <- TermDocumentMatrix(corpus, control = list(tokenize = BigramTokenizer))
head(corpus)
corpus
head(skills)
head(tail(skills))
head(tail(skills, -1))
corpus <- tm_map(x=DataframeSource(tail(skills,-1)), FUN=removeWords, stopwords("english"))
corpus <- tm_map(x=DataframeSource(skills), FUN=removeWords, stopwords("english"))
corpus <- tm_map(x=Corpus(DataframeSource(tail(skills,-1))), FUN=removeWords, stopwords("english"))
tdm <- TermDocumentMatrix(corpus, control = list(tokenize = BigramTokenizer))
BigramTokenizer
?rep
debug(TermDocumentMatrix)
tdm <- TermDocumentMatrix(corpus, control = list(tokenize = BigramTokenizer))
head(v)
head(tflist)
head(termFreq)
control
head(x)
Q
tdm <- TermDocumentMatrix(corpus, control = list(tokenize = BigramTokenizer))
tflist
head(tflist)
?
hello
l
list
install.packages("rmr")
Q
tdm <- TermDocumentMatrix(corpus, control = list(tokenize = BigramTokenizer))
x
termFreq
head(tflist)
TermDocumentMatrix
Q
tdm <- TermDocumentMatrix(corpus, control = list(tokenize = BigramTokenizer))
Q
?Weka_control
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(max = 2))
tdm <- TermDocumentMatrix(corpus, control = list(tokenize = BigramTokenizer))
head(tflist)
?termFreq
?parallel::mcapply
?parallel::mclapply
Q
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = BigramTokenizer))
parallel::mclapply(corpus, FUN=print, control = list(tokenize = BigramTokenizer))
BigramTokenizer
BigramTokenizer("component specification")
BigramTokenizer("component specification kjfdkj fdhj")
class(BigramTokenizer("component specification"))
parallel::mclapply(corpus, FUN=termFreq)
?termFreq
?NGramTokenizer
parallel::mclapply(corpus, FUN=print, control = list(tokenize = NGramTokenizer))
parallel::mclapply(corpus, FUN=print, control = list(tokenize = function(x) NGramTokenizer(x, Weka_control(min=2))))
parallel::mclapply(corpus, FUN=print, control = list(tokenize = function(x) NGramTokenizer(x, Weka_control(max=2))))
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) NGramTokenizer(x, Weka_control(max=2))))
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) NGramTokenizer(x, Weka_control(min=2))))
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) NGramTokenizer(x, Weka_contr
parallel::mclapply(corpus, FUN=print, control = list(tokenize = NGramTokenizer))
parallel::mclapply(corpus, FUN=print, control = list(tokenize = NGramTokenizer))
parallel::mclapply(corpus, FUN=termFreq
);
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) NGramTokenizer(x)))
parallel::mclapply(corpus, FUN=class)
?NGramTokenizer
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) NGramTokenizer(as.charater(x))))
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) NGramTokenizer(as.charater(x?
;
?as.character
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) NGramTokenizer(charater(x?
)
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) NGramTokenizer(character(x)))
)
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) print(class(x))))
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) print("who am i"))
)
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = function(x) c("hello", "world")))
?termFreq
?scan_tokenizer
?NGramTokenizer
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = NGramTokenizer))
parallel::mclapply(corpus, FUN=termFreq, control = list(tokenize = scan_tokenizer))
corpus[7623]
corpus$`7623`
corpus$7623
corpus[7623]
scan_tokenizer(corpus[7623])
scan_tokenizer(as.character(corpus[7623]))
?library
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="classification",fun="classifyRandomForest",parameters='{"train":{"datatype":"datasource","value":"3843"},"test":{"datatype":"list","value":{"Accelerometer.X":-5.6,"Accelerometer.Y":-2.5,"Accelerometer.Z":3.7,"Gyroscope.X":-84.2,"Gyroscope.Y":-132.2,"Gyroscope.Z":-80}},"dependentVariable":{"datatype":"string","value":"action"}')
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='dynamic',package="classification",fun="classifyRandomForest",parameters='{"train":{"datatype":"datasource","value":"3843"},"test":{"datatype":"list","value":{"Accelerometer.X":-5.6,"Accelerometer.Y":-2.5,"Accelerometer.Z":3.7,"Gyroscope.X":-84.2,"Gyroscope.Y":-132.2,"Gyroscope.Z":-80}},"dependentVariable":{"datatype":"string","value":"action"}')
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='dynamic',package="Classification",fun="classifyRandomForest",parameters='{"train":{"datatype":"datasource","value":"3843"},"test":{"datatype":"list","value":{"Accelerometer.X":-5.6,"Accelerometer.Y":-2.5,"Accelerometer.Z":3.7,"Gyroscope.X":-84.2,"Gyroscope.Y":-132.2,"Gyroscope.Z":-80}},"dependentVariable":{"datatype":"string","value":"action"}')
openCPUExecute(authToken=authToken,algoServer=algoServer,package="Classification",fun="classifyRandomForest",parameters='{"train":{"datatype":"datasource","value":"3843"},"test":{"datatype":"list","value":{"Accelerometer.X":-5.6,"Accelerometer.Y":-2.5,"Accelerometer.Z":3.7,"Gyroscope.X":-84.2,"Gyroscope.Y":-132.2,"Gyroscope.Z":-80}},"dependentVariable":{"datatype":"string","value":"action"}')
source('~/git/opencpu/neo4jr/shiny/schools/server.R')
source('~/git/opencpu/neo4jr/shiny/schools/server.R')
openCPUExecute(authToken=authToken,algoServer=algoServer,package="Classification",fun="classifyRandomForest",parameters='{"train":{"datatype":"datasource","value":"3843"},"test":{"datatype":"list","value":{"Accelerometer.X":-5.6,"Accelerometer.Y":-2.5,"Accelerometer.Z":3.7,"Gyroscope.X":-84.2,"Gyroscope.Y":-132.2,"Gyroscope.Z":-80}},"dependentVariable":{"datatype":"string","value":"action"}')
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843")),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action"))
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843")),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)))
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)))
)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
source('~/git/opencpu/classification/R/do.R')
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
authToken
authToken <- "02cfc86d9992e822510318adebccb4d3"
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
debug(openCPUExecute)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
debug(getFile)
content
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
c
undebug(openCPUExecute)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
debug(openCPUExecute)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
undebug(getFile)
realParams
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
debug(classifyRandomForest)
Q
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
fun
debug(classifyRandomForest)
debug(rForest)
train
test
trainFromFile
modelFile
debug(preProcess)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
train
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
Q
undebug(openCPUExecute)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
undebug(preProcess)
Q
debug()
undebug(classifyRandomForest)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
Q
undebug(rForest)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
debug(preProcess)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
Q
debug(getFile)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
Q
read.csv("/opt/Data-Sets/Automation//file_3843")
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
Q
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
destfile
test
dependentVariable
train
h
help
Q
undebug(openCPUExecute)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
undebug(getFile)
Q
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
Q
undebug(preProcess)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
debug(openCPUExecute)
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
?findLineNum
c
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
setBreakPoint()
?proxyOutput
openCPUExecute(authToken=authToken,algoServer=algoServer,evalType='static',package="Classification",fun="classifyRandomForest",parameters=list(train=list(datatype="datasource", value="3843"),test=list(datatype="list",value=list("Accelerometer.X"=-5.6,"Accelerometer.Y"=-2.5,"Accelerometer.Z"=3.7,"Gyroscope.X"=-84.2,"Gyroscope.Y"=-132.2,"Gyroscope.Z"=-80)),dependentVariable=list(datatype="string",value="action")))
proxyOuput
proxyOutput
Q
library(websockets)
server = create_server()
f = function(WS) {
websocket_write("Hello there!", WS)
}
set_callback("established", f, server)
source('~/git/opencpu/websockets/R/startServer.R')
websocket_close(server)
source('~/git/opencpu/websockets/R/startServer.R')
source('~/git/opencpu/websockets/R/startServer.R')
source('~/git/opencpu/websockets/R/startServer.R')
startWebsocketServer()
startWebsocketServer()
library(websockets)
client = websocket("ws://echo.websocket.org", port=80)
set_callback("receive", function(DATA, WS, HEADER) cat(rawToChar(DATA)), client
)
websocket_write("Testing, testing", client)
service(client)
websocket_write("wai wai", client)
service(client)
?service
client = websocket("ws://localhost", port=7681)
source('~/git/opencpu/websockets/R/startServer.R')
startWebsocketServer
startWebsocketServer()
?setCallback
closeServer()
startWebsocketServer()
library(websockets)
server = create_server()
f = function(WS) {
websocket_write("Hello there!", WS)
}
set_callback("established", f, server)
?create_server
service(server)
while(TRUE)
{
service(server)
}
source('~/git/opencpu/websockets/R/startServer.R')
source('~/git/opencpu/websockets/R/startServer.R')
source('~/git/opencpu/websockets/R/startServer.R')
websocket_close(server)
startServer()
source('~/git/opencpu/classification/R/do.R')
source('~/git/opencpu/classification/R/do.R')
source('~/git/opencpu/classification/R/do.R')
source('~/git/opencpu/classification/R/do.R')
server = startWebsocketServer()
library(Classification)
server = startWebsocketServer()
websocket_close(server)
server = startWebsocketServer()
library(algo2r)
install.packages("devtools")
source('~/git/opencpu/siemens/R/siemens-package.r')
plot1()
setwd("~/git/opencpu/siemens/")
plot1()
